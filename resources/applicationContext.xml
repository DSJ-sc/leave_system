<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
 <context:property-placeholder location="classpath:mysql.properties" />
    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 基本属性 url、user、password -->  
        <property name="driverClassName" value="${driverClassName}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${user}" />  
        <property name="password" value="${password}" />  
        <property name="initialSize" value="${initialSize}" />  
        <property name="minIdle" value="${minIdle}" />   
        <property name="maxActive" value="${maxActive}" />  
        <property name="maxWait" value="${maxWait}" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${removeAbandoned}" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${testOnReturn}" />
    </bean>
    <!-- 配置MyBatis需要的核心类sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations" value="classpath:com/greathiit/mapper/*.xml"></property>
        <property name="typeAliasesPackage" value="com.greathiit.entity"></property>
        <property name="configLocation" value="classpath:configuration.xml"></property>
        <!-- 加载PageHelper分页插件 -->
        <property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageInterceptor">
		        <property name="properties">
		          <!--使用下面的方式配置参数，一行配置一个 -->
		          <value>
		          	helperDialect=mysql
		            <!-- pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果 -->
		            pageSizeZero = true
		            <!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->  
		            offsetAsPageNum = true
		            <!-- pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页  -->
		            reasonable = true
		            <!-- 支持通过 Mapper 接口参数来传递分页参数 -->
		            supportMethodsArguments = true
		          </value>
		        </property>
		      </bean>
		    </array>
 		 </property>
    </bean>
    <!-- Spring整合MyBatis -->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="basePackage" value="com.greathiit.mapper"></property>
    
    </bean>
</beans>
